// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  provider  String   // google, apple, github, etc.
  providerId String
  isArtist  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist    Artist?
  playlists Playlist[]
  likes     Like[]
  plays     Play[]
  follows   Follow[] @relation("UserFollows")

  @@map("users")
}

model Artist {
  id          String   @id @default(cuid())
  userId      String   @unique
  stageName   String
  bio         String?
  banner      String?
  verified    Boolean  @default(false)
  monthlyListeners Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  albums      Album[]
  songs       Song[]
  followers   Follow[]

  @@map("artists")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverUrl    String?
  releaseDate DateTime
  genre       String?
  isPublic    Boolean  @default(true)
  artistId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs       Song[]

  @@map("albums")
}

model Song {
  id          String   @id @default(cuid())
  title       String
  duration    Int      // dur√©e en secondes
  audioUrl    String
  coverUrl    String?
  lyrics      String?
  genre       String?
  isPublic    Boolean  @default(true)
  playCount   Int      @default(0)
  artistId    String
  albumId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artist      Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album       Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  likes       Like[]
  plays       Play[]
  playlistSongs PlaylistSong[]

  @@map("songs")
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverUrl    String?
  isPublic    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs       PlaylistSong[]

  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int
  addedAt    DateTime @default(now())

  // Relations
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model Like {
  id     String @id @default(cuid())
  userId String
  songId String
  likedAt DateTime @default(now())

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("likes")
}

model Play {
  id       String   @id @default(cuid())
  userId   String?
  songId   String
  playedAt DateTime @default(now())

  // Relations
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("plays")
}

model Follow {
  id         String   @id @default(cuid())
  followerId String
  artistId   String
  followedAt DateTime @default(now())

  // Relations
  follower   User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([followerId, artistId])
  @@map("follows")
}
